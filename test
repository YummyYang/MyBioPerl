#!/usr/bin/perl -w
use strict;
use MyBioPerl;

info();

my $dna = "TTAtTTATTTTTTTTTTTTATCGGCATTTAACCGGGCCACTGGAACCT";
print "cg percentage:".cg_percentage($dna)."\n";

print "has poly_t:".dna_has_poly_t($dna)."\n";

print "rna:".dna2rna($dna)."\n";
print "dna:".rna2dna(dna2rna($dna))."\n";

print "dna:              :".$dna."\n";
print "reverse complement:".reverse_complement($dna)."\n";

my $str = to_lower_string($dna);
print "lower:".$str."\n";
print "lower:".to_upper_string($str)."\n";

print "is_reverse_complement:\n";
#is_reverse_complement("atcg");		#test argument number exception.
#is_reverse_complement('ATCG','CGATc');	#test argument length exception.
my $dna1 = "ATCG";
my $dna2 = "CGAT";
is_reverse_complement($dna1,$dna2);
print "\n";
print "switch_two_bases_by_substr:\n";
switch_two_bases_by_substr($dna,3,5);
print "\n";
print "switch_two_bases_by_splice:\n";
print switch_two_bases_by_splice($dna,3,5);
print "\n";
print "switch_two_bases_by_array:\n";
switch_two_bases_by_array($dna,3,5);
print"\n";
print "frequency of nucleotides:\n";
frequency_of_nucleotides("sample.dna");
print "\n";
print "random_coden:".random_codon("ATC")."\n";
print "isDNA:";
print is_DNA($dna)."\n";

print "\n\n search gene name:\n";
my @genes = qw(xgene1  ygene2  zgene3  agene4  bgene5);
my $gene_name = "zgene3";

#print "please input gene name:";
#my $gene_name = <>;
#chomp $gene_name;

search_gene_name($gene_name,@genes);	#ok, $ first , @ second.
#search_gene_name(\@genes,$gene_name);	#ok. @ first , $ second.

#search_gene_name_by_binarysearch(\@genes,$gene_name);

my @new_genes = insert_an_element_into_sorted_array(\@genes,$gene_name);
print "new:@new_genes \n";

print "dna to peptide : ";
print dna2peptide($dna)."\n\n";

my @filedata = get_file_data("sample.dna");

if(is_fasta(@filedata)) {
	print "is fasta data\n";
	my $dna= extract_sequence_from_fasta_data(@filedata);
	print "is dna:".is_DNA($dna)."\n";
print "\n ---------------frame 1---------------------\n\n";
	my $protein = dna2peptide($dna);
	print_sequence($protein,30);
print "\n ---------------frame 1---------------------\n\n";
	$protein = dna2peptide($dna);
	print_sequence($protein,30);
print "\n ---------------frame 1---------------------\n\n";
	$protein = dna2peptide($dna);
	print_sequence($protein,30);
}else{
	print "not fasta data\n";
}

print "\n ---------------reading frame 1---------------------\n\n";
	my $protein = translate_frame($dna,1);
	print_sequence($protein,70);
print "\n ---------------reading frame 2---------------------\n\n";
	$protein = translate_frame($dna,2);
	print_sequence($protein,70);
print "\n ---------------reading frame 3---------------------\n\n";
	$protein = translate_frame($dna,3);
	print_sequence($protein,70);
# calculate reverse complement
	my $revcom = reverse_complement($dna);

print "\n ---------------reading frame 4---------------------\n\n";
	$protein = translate_frame($revcom,1);
	print_sequence($protein,70);
print "\n ---------------reading frame 5---------------------\n\n";
	$protein = translate_frame($revcom,2);
	print_sequence($protein,70);
print "\n ---------------reading frame 6---------------------\n\n";
	$protein = translate_frame($revcom,3);
	print_sequence($protein,70);

print "\n Amino Acid and its codons:\n\n";
my %reversed_genetic_code = get_reversed_genetic_codon();
foreach my $aa (keys %reversed_genetic_code){
	my $reversed_genetic_code =  $reversed_genetic_code{$aa};
	my @reversed_genetic_code =  split (' ', $reversed_genetic_code );
	print "$aa: @reversed_genetic_code  \n";
}

print "print IUB table:\n";
print_iub_table();

#print "iub2regexp:\n";
#print iub2regexp("ARYCMKGSWBTDHVN")."\n";

#print "parseREBASE:\n";
#parseREBASE("bionet");

#print "make restriction map from user queries.\n";
#make_restriction_map_from_user_queries();

#print "get restriction digest:\n";
#get_restriction_digest();

#print "get nonpalindromic restriction site:\n";
#get_nonpalindromic_recognition_site();

#db_demo();
  
#print "print DNA sequence:\n";
#print "takes a long DNA sequence as input and outputs the counts of"
#	." all four-base subsequences (256 of them all),sorted by "
#	."frequence. \nA four-base subsequence starts at each location"
#	." 1, 2, 3, and so on. \n";
##print_word_frequence();
#print_dna_frequence();

#print "extract annotation and sequence from genebank lib:\n";
#extract_annotation_and_sequence_from_genebank_file();

#print "Extract annotation and sequence section from GeneBank record.\n"
#extract_annotation_and_sequence_section();

#print "\nparsing genebank annotation:\n";
#parsing_genebank_annotation();

#print "search genebank library:"
# ."This exmaple shows how to use subroutines to answer a question such as :"
# ."what are the gene on chromesome 22 that contain a given motif and"
# ."have small exons .\n";
#search_genebank_library();

#print "given the annotations section of a GeneBank record stored in a scalar,"
#	."returns a hash with keys equal to the names of the top level fileds"
#	." and values equal to the contents of those fields.\n";
#get_annotation_keys();

#print "\ndb demo with genebank:\n";
#db_demo_with_genebank();

#print "print amino acid frequence\n";
#print_amino_acid_frequence();

#print "Extract words from genebank library.\n";
#extract_words_from_genbank_lib();

#print "List contets of folder :\n";
#list_contents_of_folder("/");

#print "extract sequence chains from pdb file:\n";
#extract_sequence_chains_from_pdb_file();

#print "extract_atomic_coordinates_from_pdb_file:\n";
#extract_atomic_coordinates_from_pdb_file();

#print "call_stride_for_secondary_structure_prediction:\n";
#call_stride_for_secondary_structure_prediction();

#print "find oldest and largest files.\n";
#find_oldest_and_largest();

#print "find all perl files:\n";
#find_all_perl_files();

#print "parse and search pdb files\n";
#parse_and_search_pdb_files();

#print "parse_pdb_record_types_by_re\n";
#parse_pdb_record_types_by_re();

#print "extract secondary structure from pdb file:\n";
#extract_secondary_structure_from_pdb_file();

#print "extract secondary structure to pdb:\n";
#extract_secondary_structure_to_dbm();

#print "string_over_ridding:\n";
#string_over_ridding();

#print "recursive_determine_array_size:\n";
#recursive_determine_array_size();

print "extract_primary_amino_acid_sequence_from_pdb_file:\n";
extract_primary_amino_acid_sequence_from_pdb_file();
